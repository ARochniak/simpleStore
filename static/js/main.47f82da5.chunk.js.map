{"version":3,"sources":["reducer/index.js","components/Header/index.js","components/Main/components/Login/index.js","components/Main/actions/index.js","components/Main/components/Market/index.js","components/Main/components/Cart/index.js","components/Main/index.js","serviceWorker.js","index.js","App.js"],"names":["toggleInCart","productList","action","map","product","productName","inCart","Header","withRouter","props","className","id","onClick","history","push","htmlFor","filter","length","to","connect","state","Form","onChange","e","target","reportValidity","validity","valid","style","border","onSubmit","preventDefault","querySelectorAll","forEach","input","type","localStorage","setItem","value","onBlur","tagName","borderColor","defaultValue","getItem","placeholder","minLength","required","parentNode","toggleIncart","dispatch","i","key","onClickHandler","productsInCart","exact","path","component","Login","Market","Cart","Boolean","window","location","hostname","match","store","createStore","initialState","applyMiddleware","thunk","ReactDOM","render","from","Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47f82da5.chunk.js","sourcesContent":["const toggleInCart = (productList, action) => {\r\n\treturn {productList: productList.map( (product) => {\r\n\t\t\t\treturn product.productName === action.productName ? \r\n\t\t\t\t\t{...product, inCart: !product.inCart} : product\r\n\t\t\t})};\r\n}\r\n\r\nexport default (initialState = {}, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase 'TOGGLE_INCART':\r\n\t\t\treturn toggleInCart(initialState.productList, action);\r\n\t\tdefault:\r\n\t\t\treturn initialState;\r\n\t}\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport './style.css';\r\n\r\nconst Header = withRouter( props => {\r\n\r\n\tconst onClickHandler = () => props.history.push('/cart');\r\n\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<div className='header'>\r\n\t\t\t\t<button id='toCart' onClick={onClickHandler}>Cart</button>\r\n\t\t\t\t<label htmlFor='toCart'>\r\n\t\t\t\t\t{props.productList.filter( product => product.inCart).length}\r\n\t\t\t\t</label>\r\n\t\t\t</div>\t\r\n\t\t\t<nav>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><Link to='/market'>Market</Link></li>\r\n\t\t\t\t\t<li><Link to='/cart'>Cart</Link></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</nav>\r\n\t\t</header>\r\n\t);\r\n})\r\n\r\nfunction mapStateToProps (state){ \r\n\treturn {productList: state.productList};\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header);","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Form = (props) => {\r\n\tconst onClickHandler = e => {\r\n\t\tconst inputs = e.target.parentNode.querySelectorAll('input');\r\n\t\tinputs.forEach( input => {\r\n\t\t\tif (!input.validity.valid) input.style.borderColor = 'red';\r\n\t\t})\r\n\t}\r\n\tconst onSubmitHandler = e => {\r\n\t\te.preventDefault();\r\n\t\tconst inputs = e.target.querySelectorAll('input');\r\n\t\tinputs.forEach( input => {\r\n\t\t\tif (input.type === 'text') localStorage.setItem('login', input.value);\r\n\t\t\tlocalStorage.setItem('password', input.value);\r\n\t\t})\r\n\t\tprops.history.push('/market');\r\n\t}\r\n\tconst validateOnChange = e => {\r\n\t\tconst target = e.target;\r\n\t\ttarget.reportValidity();\r\n\t\tif (target.validity.valid) target.style.border = '';\r\n\t}\r\n\tconst onBlurHandler = e => {\r\n\t\tconst target = e.target;\r\n\t\tif (target.tagName !== 'INPUT') return;\r\n\t\tif (!target.validity.valid) target.style.borderColor = 'red';\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className='formContainer'>\r\n\t\t\t<form \r\n\t\t\t\tonChange={validateOnChange} \r\n\t\t\t\tonSubmit={onSubmitHandler}\r\n\t\t\t\tonBlur={onBlurHandler}>\r\n\t\t\t\t\r\n\t\t\t\t<input defaultValue={localStorage.getItem('login')} \r\n\t\t\t\t\tplaceholder='Login' type='text' minLength='8' required/>\r\n\t\t\t\t<input defaultValue={localStorage.getItem('password')} \r\n\t\t\t\t\tplaceholder='password' type='password' minLength='8' required/>\r\n\t\t\t\t<button onClick={onClickHandler} type='submit'>Submit</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Form;","const toggleIncart = productName => ({type:'TOGGLE_INCART', productName: productName});\r\n\r\nexport default toggleIncart;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport toggleIncart from '../../actions';\r\n\r\n\r\nconst Market = props => {\r\n\tconst onClickHandler = (product) => {\r\n\t\tif (product.inCart) props.history.push('/cart');\r\n\t\telse props.toggleIncart(product.productName);\r\n\t}\r\n\tconst renderProducts = list => {\r\n\t\tconst productList = list.map( (product, i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<li key={i}>\r\n\t\t\t\t\t<p>{product.productName}</p>\r\n\t\t\t\t\t<button onClick={()=>{onClickHandler(product)}}>\r\n\t\t\t\t\t\t{(product.inCart ? \"Go to cart\" : \"Add to cart\")}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t\t)\t\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t\treturn productList;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ul>\r\n\t\t\t{renderProducts(props.productList)}\r\n\t\t</ul>\r\n\t)\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n\treturn {productList: state.productList};\r\n}\r\n\r\nfunction mapDispatchToProps (dispatch) {\r\n\treturn {\r\n\t\ttoggleIncart: (productName) => {\r\n\t\t\tdispatch(toggleIncart(productName));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps)(Market);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport toggleIncart from '../../actions';\r\n\r\n\r\nconst Cart = props => {\r\n\tconst productInCart = () => {\r\n\t\treturn props.productList.filter( product => product.inCart )\r\n\t\t\t.map( (product, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<li key={i}>\r\n\t\t\t\t\t\t<p>{product.productName}</p>\r\n\t\t\t\t\t\t<button onClick={\r\n\t\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\t\tprops.toggleIncart(product.productName);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}>Remove from cart</button>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t}\r\n\tconst productsInCart = productInCart();\r\n\tif (productsInCart.length !== 0) {\r\n\t\treturn (\r\n\t\t\t<ul>\r\n\t\t\t\t{productsInCart}\r\n\t\t\t</ul>\r\n\t\t)\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>Nothing added to cart</p>\r\n\t\t\t<p>Add some at <Link to='/market'>market</Link></p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n\treturn {productList: state.productList};\r\n}\r\n\r\nfunction mapDispatchToProps (dispatch) {\r\n\treturn {\r\n\t\ttoggleIncart: (productName) => {\r\n\t\t\tdispatch(toggleIncart(productName));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Login from './components/Login';\r\nimport Market from './components/Market';\r\nimport Cart from './components/Cart';\r\n\r\nexport default (props) => {\r\n\treturn (\r\n\t\t<Switch>\r\n\t\t\t<Route exact path='/login' component={Login}></Route>\r\n\t\t\t<Route exact path='/market' component={Market}></Route>\r\n\t\t\t<Route exact path='/cart' component={Cart}></Route>\r\n\t\t</Switch>\r\n\t\t);\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter, Switch, Redirect } from 'react-router-dom';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './reducer';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst initialState = {\r\n\tproductList: [\r\n\t\t{productName: 'iPhone', inCart: false},\r\n\t\t{productName: 'Samsung Galaxy Note', inCart: false},\r\n\t\t{productName: 'OnePlus', inCart: false}\r\n\t]\r\n} \r\nconst store = createStore(\r\n\treducer,\r\n\tinitialState,\r\n\tapplyMiddleware(thunk));\r\n\r\nReactDOM.render((\r\n\t<Provider store={store}>\r\n\t\t<HashRouter>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Redirect exact from=\"/\" to=\"/login\" />\r\n\t\t\t\t<App />\r\n\t\t\t</Switch>\r\n\t\t</HashRouter>\r\n\t</Provider>\r\n\t), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport Header from './components/Header';\r\nimport Main from './components/Main';\r\nimport './App.css';\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <main>\r\n      \t<Main />\r\n      </main>\t\r\n    </div>  \r\n  );\r\n}"],"sourceRoot":""}